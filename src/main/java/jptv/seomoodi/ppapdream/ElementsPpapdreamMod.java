/*
 *    MCreator note:
 *
 *    This file is autogenerated to connect all MCreator mod elements together.
 *
 */
package jptv.seomoodi.ppapdream;

import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.common.registry.EntityEntry;
import net.minecraftforge.fml.common.network.simpleimpl.IMessageHandler;
import net.minecraftforge.fml.common.network.simpleimpl.IMessage;
import net.minecraftforge.fml.common.network.IGuiHandler;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.discovery.ASMDataTable;
import net.minecraftforge.fml.common.IWorldGenerator;
import net.minecraftforge.fml.common.IFuelHandler;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.client.event.ModelRegistryEvent;

import net.minecraft.world.storage.WorldSavedData;
import net.minecraft.world.gen.IChunkGenerator;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.World;
import net.minecraft.util.ResourceLocation;
import net.minecraft.potion.Potion;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Item;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.block.Block;

import jptv.seomoodi.ppapdream.gui.GuiGuiPgeTravelPhoto02;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeTravelPhoto01;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgePhoto02;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeNecktie;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeMemo1;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeMemo04;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeMemo03;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeMemo02;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeMemo01;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeFourcut;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeDreamhall;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeDiary04;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeDiary03;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeDiary02;
import jptv.seomoodi.ppapdream.gui.GuiGuiPgeDiary;
import jptv.seomoodi.ppapdream.gui.GuiGuiOgrSocks;
import jptv.seomoodi.ppapdream.gui.GuiGuiOgrMessage;
import jptv.seomoodi.ppapdream.gui.GuiGuiNightmareManual;
import jptv.seomoodi.ppapdream.gui.GuiGuiNewspaper;
import jptv.seomoodi.ppapdream.gui.GuiGuiNbpUmbrella;
import jptv.seomoodi.ppapdream.gui.GuiGuiNbpLetter;
import jptv.seomoodi.ppapdream.gui.GuiGuiNbpComplaint;
import jptv.seomoodi.ppapdream.gui.GuiGuiMsgGlove;
import jptv.seomoodi.ppapdream.gui.GuiGuiLucidWebtoon;
import jptv.seomoodi.ppapdream.gui.GuiGuiLucidUpdate;
import jptv.seomoodi.ppapdream.gui.GuiGuiLucidMap02;
import jptv.seomoodi.ppapdream.gui.GuiGuiLucidDreamHallDram;
import jptv.seomoodi.ppapdream.gui.GuiGuiLucidDreamHall;
import jptv.seomoodi.ppapdream.gui.GuiGuiKjpXmas;
import jptv.seomoodi.ppapdream.gui.GuiGuiKjpDriveLicense;
import jptv.seomoodi.ppapdream.gui.GuiGuiIOgrBucketlistPoster;
import jptv.seomoodi.ppapdream.gui.GuiGuiHsdDriveLicense;
import jptv.seomoodi.ppapdream.gui.GuiGuiHsdDiary;
import jptv.seomoodi.ppapdream.gui.GuiGuiHotelReceipt01;
import jptv.seomoodi.ppapdream.gui.GuiGuiHotelPaper;
import jptv.seomoodi.ppapdream.gui.GuiGuiHotelLight;
import jptv.seomoodi.ppapdream.gui.GuiGuiGsdMypad;
import jptv.seomoodi.ppapdream.gui.GuiGuiGroComic03;
import jptv.seomoodi.ppapdream.gui.GuiGuiGroComic02;
import jptv.seomoodi.ppapdream.gui.GuiGuiGroComic01;
import jptv.seomoodi.ppapdream.gui.GuiGuiGroCertificate;
import jptv.seomoodi.ppapdream.gui.GuiGuiGloDrawing;
import jptv.seomoodi.ppapdream.gui.GuiGuiDoctorNote;
import jptv.seomoodi.ppapdream.gui.GuiGuiBucketList;
import jptv.seomoodi.ppapdream.gui.GuiGuiAddlc3;
import jptv.seomoodi.ppapdream.gui.GuiGuiAddlc2;
import jptv.seomoodi.ppapdream.gui.GuiGuiAddlc1;
import jptv.seomoodi.ppapdream.gui.GuiGuiAbhSisterPhoto;
import jptv.seomoodi.ppapdream.gui.GuiGuiAbhPracticeNote;

import java.util.function.Supplier;
import java.util.Random;
import java.util.Map;
import java.util.List;
import java.util.HashMap;
import java.util.Collections;
import java.util.ArrayList;

import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Retention;

public class ElementsPpapdreamMod implements IFuelHandler, IWorldGenerator {
	public final List<ModElement> elements = new ArrayList<>();
	public final List<Supplier<Block>> blocks = new ArrayList<>();
	public final List<Supplier<Item>> items = new ArrayList<>();
	public final List<Supplier<Biome>> biomes = new ArrayList<>();
	public final List<Supplier<EntityEntry>> entities = new ArrayList<>();
	public final List<Supplier<Potion>> potions = new ArrayList<>();
	public static Map<ResourceLocation, net.minecraft.util.SoundEvent> sounds = new HashMap<>();
	public ElementsPpapdreamMod() {
		sounds.put(new ResourceLocation("ppapdream", "bakha_demo_song"),
				new net.minecraft.util.SoundEvent(new ResourceLocation("ppapdream", "bakha_demo_song")));
		sounds.put(new ResourceLocation("ppapdream", "voice_alak01"),
				new net.minecraft.util.SoundEvent(new ResourceLocation("ppapdream", "voice_alak01")));
		sounds.put(new ResourceLocation("ppapdream", "voice_ppap01"),
				new net.minecraft.util.SoundEvent(new ResourceLocation("ppapdream", "voice_ppap01")));
		sounds.put(new ResourceLocation("ppapdream", "revolver_shot"),
				new net.minecraft.util.SoundEvent(new ResourceLocation("ppapdream", "revolver_shot")));
		sounds.put(new ResourceLocation("ppapdream", "dream_dragonfly"),
				new net.minecraft.util.SoundEvent(new ResourceLocation("ppapdream", "dream_dragonfly")));
	}

	public void preInit(FMLPreInitializationEvent event) {
		try {
			for (ASMDataTable.ASMData asmData : event.getAsmData().getAll(ModElement.Tag.class.getName())) {
				Class<?> clazz = Class.forName(asmData.getClassName());
				if (clazz.getSuperclass() == ElementsPpapdreamMod.ModElement.class)
					elements.add((ElementsPpapdreamMod.ModElement) clazz.getConstructor(this.getClass()).newInstance(this));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		Collections.sort(elements);
		elements.forEach(ElementsPpapdreamMod.ModElement::initElements);
		this.addNetworkMessage(PpapdreamModVariables.WorldSavedDataSyncMessageHandler.class, PpapdreamModVariables.WorldSavedDataSyncMessage.class,
				Side.SERVER, Side.CLIENT);
	}

	public void registerSounds(RegistryEvent.Register<net.minecraft.util.SoundEvent> event) {
		for (Map.Entry<ResourceLocation, net.minecraft.util.SoundEvent> sound : sounds.entrySet())
			event.getRegistry().register(sound.getValue().setRegistryName(sound.getKey()));
	}

	@Override
	public void generate(Random random, int chunkX, int chunkZ, World world, IChunkGenerator cg, IChunkProvider cp) {
		elements.forEach(element -> element.generateWorld(random, chunkX * 16, chunkZ * 16, world, world.provider.getDimension(), cg, cp));
	}

	@Override
	public int getBurnTime(ItemStack fuel) {
		for (ModElement element : elements) {
			int ret = element.addFuel(fuel);
			if (ret != 0)
				return ret;
		}
		return 0;
	}

	@SubscribeEvent
	public void onPlayerLoggedIn(net.minecraftforge.fml.common.gameevent.PlayerEvent.PlayerLoggedInEvent event) {
		if (!event.player.world.isRemote) {
			WorldSavedData mapdata = PpapdreamModVariables.MapVariables.get(event.player.world);
			WorldSavedData worlddata = PpapdreamModVariables.WorldVariables.get(event.player.world);
			if (mapdata != null)
				PpapdreamMod.PACKET_HANDLER.sendTo(new PpapdreamModVariables.WorldSavedDataSyncMessage(0, mapdata), (EntityPlayerMP) event.player);
			if (worlddata != null)
				PpapdreamMod.PACKET_HANDLER.sendTo(new PpapdreamModVariables.WorldSavedDataSyncMessage(1, worlddata), (EntityPlayerMP) event.player);
		}
	}

	@SubscribeEvent
	public void onPlayerChangedDimension(net.minecraftforge.fml.common.gameevent.PlayerEvent.PlayerChangedDimensionEvent event) {
		if (!event.player.world.isRemote) {
			WorldSavedData worlddata = PpapdreamModVariables.WorldVariables.get(event.player.world);
			if (worlddata != null)
				PpapdreamMod.PACKET_HANDLER.sendTo(new PpapdreamModVariables.WorldSavedDataSyncMessage(1, worlddata), (EntityPlayerMP) event.player);
		}
	}
	private int messageID = 0;
	public <T extends IMessage, V extends IMessage> void addNetworkMessage(Class<? extends IMessageHandler<T, V>> handler, Class<T> messageClass,
			Side... sides) {
		for (Side side : sides)
			PpapdreamMod.PACKET_HANDLER.registerMessage(handler, messageClass, messageID, side);
		messageID++;
	}
	public static class GuiHandler implements IGuiHandler {
		@Override
		public Object getServerGuiElement(int id, EntityPlayer player, World world, int x, int y, int z) {
			if (id == GuiGuiAbhPracticeNote.GUIID)
				return new GuiGuiAbhPracticeNote.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiGloDrawing.GUIID)
				return new GuiGuiGloDrawing.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeTravelPhoto01.GUIID)
				return new GuiGuiPgeTravelPhoto01.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeTravelPhoto02.GUIID)
				return new GuiGuiPgeTravelPhoto02.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeFourcut.GUIID)
				return new GuiGuiPgeFourcut.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiGsdMypad.GUIID)
				return new GuiGuiGsdMypad.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiKjpDriveLicense.GUIID)
				return new GuiGuiKjpDriveLicense.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiIOgrBucketlistPoster.GUIID)
				return new GuiGuiIOgrBucketlistPoster.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiLucidDreamHall.GUIID)
				return new GuiGuiLucidDreamHall.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiBucketList.GUIID)
				return new GuiGuiBucketList.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeDiary.GUIID)
				return new GuiGuiPgeDiary.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiHotelLight.GUIID)
				return new GuiGuiHotelLight.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiHsdDiary.GUIID)
				return new GuiGuiHsdDiary.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiLucidUpdate.GUIID)
				return new GuiGuiLucidUpdate.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiNewspaper.GUIID)
				return new GuiGuiNewspaper.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiOgrSocks.GUIID)
				return new GuiGuiOgrSocks.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeNecktie.GUIID)
				return new GuiGuiPgeNecktie.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeDiary02.GUIID)
				return new GuiGuiPgeDiary02.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeMemo01.GUIID)
				return new GuiGuiPgeMemo01.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiLucidMap02.GUIID)
				return new GuiGuiLucidMap02.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiHotelReceipt01.GUIID)
				return new GuiGuiHotelReceipt01.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgePhoto02.GUIID)
				return new GuiGuiPgePhoto02.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiMsgGlove.GUIID)
				return new GuiGuiMsgGlove.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiNbpUmbrella.GUIID)
				return new GuiGuiNbpUmbrella.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiGroCertificate.GUIID)
				return new GuiGuiGroCertificate.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiNbpLetter.GUIID)
				return new GuiGuiNbpLetter.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiAddlc1.GUIID)
				return new GuiGuiAddlc1.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiAddlc2.GUIID)
				return new GuiGuiAddlc2.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiAddlc3.GUIID)
				return new GuiGuiAddlc3.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiNbpComplaint.GUIID)
				return new GuiGuiNbpComplaint.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiLucidDreamHallDram.GUIID)
				return new GuiGuiLucidDreamHallDram.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeDiary03.GUIID)
				return new GuiGuiPgeDiary03.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeDiary04.GUIID)
				return new GuiGuiPgeDiary04.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiAbhSisterPhoto.GUIID)
				return new GuiGuiAbhSisterPhoto.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiHotelPaper.GUIID)
				return new GuiGuiHotelPaper.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiDoctorNote.GUIID)
				return new GuiGuiDoctorNote.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeMemo02.GUIID)
				return new GuiGuiPgeMemo02.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeMemo04.GUIID)
				return new GuiGuiPgeMemo04.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiOgrMessage.GUIID)
				return new GuiGuiOgrMessage.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiLucidWebtoon.GUIID)
				return new GuiGuiLucidWebtoon.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiHsdDriveLicense.GUIID)
				return new GuiGuiHsdDriveLicense.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiNightmareManual.GUIID)
				return new GuiGuiNightmareManual.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeDreamhall.GUIID)
				return new GuiGuiPgeDreamhall.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeMemo1.GUIID)
				return new GuiGuiPgeMemo1.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiPgeMemo03.GUIID)
				return new GuiGuiPgeMemo03.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiGroComic01.GUIID)
				return new GuiGuiGroComic01.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiGroComic02.GUIID)
				return new GuiGuiGroComic02.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiGroComic03.GUIID)
				return new GuiGuiGroComic03.GuiContainerMod(world, x, y, z, player);
			if (id == GuiGuiKjpXmas.GUIID)
				return new GuiGuiKjpXmas.GuiContainerMod(world, x, y, z, player);
			return null;
		}

		@Override
		public Object getClientGuiElement(int id, EntityPlayer player, World world, int x, int y, int z) {
			if (id == GuiGuiAbhPracticeNote.GUIID)
				return new GuiGuiAbhPracticeNote.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiGloDrawing.GUIID)
				return new GuiGuiGloDrawing.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeTravelPhoto01.GUIID)
				return new GuiGuiPgeTravelPhoto01.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeTravelPhoto02.GUIID)
				return new GuiGuiPgeTravelPhoto02.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeFourcut.GUIID)
				return new GuiGuiPgeFourcut.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiGsdMypad.GUIID)
				return new GuiGuiGsdMypad.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiKjpDriveLicense.GUIID)
				return new GuiGuiKjpDriveLicense.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiIOgrBucketlistPoster.GUIID)
				return new GuiGuiIOgrBucketlistPoster.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiLucidDreamHall.GUIID)
				return new GuiGuiLucidDreamHall.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiBucketList.GUIID)
				return new GuiGuiBucketList.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeDiary.GUIID)
				return new GuiGuiPgeDiary.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiHotelLight.GUIID)
				return new GuiGuiHotelLight.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiHsdDiary.GUIID)
				return new GuiGuiHsdDiary.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiLucidUpdate.GUIID)
				return new GuiGuiLucidUpdate.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiNewspaper.GUIID)
				return new GuiGuiNewspaper.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiOgrSocks.GUIID)
				return new GuiGuiOgrSocks.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeNecktie.GUIID)
				return new GuiGuiPgeNecktie.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeDiary02.GUIID)
				return new GuiGuiPgeDiary02.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeMemo01.GUIID)
				return new GuiGuiPgeMemo01.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiLucidMap02.GUIID)
				return new GuiGuiLucidMap02.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiHotelReceipt01.GUIID)
				return new GuiGuiHotelReceipt01.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgePhoto02.GUIID)
				return new GuiGuiPgePhoto02.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiMsgGlove.GUIID)
				return new GuiGuiMsgGlove.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiNbpUmbrella.GUIID)
				return new GuiGuiNbpUmbrella.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiGroCertificate.GUIID)
				return new GuiGuiGroCertificate.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiNbpLetter.GUIID)
				return new GuiGuiNbpLetter.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiAddlc1.GUIID)
				return new GuiGuiAddlc1.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiAddlc2.GUIID)
				return new GuiGuiAddlc2.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiAddlc3.GUIID)
				return new GuiGuiAddlc3.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiNbpComplaint.GUIID)
				return new GuiGuiNbpComplaint.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiLucidDreamHallDram.GUIID)
				return new GuiGuiLucidDreamHallDram.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeDiary03.GUIID)
				return new GuiGuiPgeDiary03.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeDiary04.GUIID)
				return new GuiGuiPgeDiary04.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiAbhSisterPhoto.GUIID)
				return new GuiGuiAbhSisterPhoto.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiHotelPaper.GUIID)
				return new GuiGuiHotelPaper.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiDoctorNote.GUIID)
				return new GuiGuiDoctorNote.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeMemo02.GUIID)
				return new GuiGuiPgeMemo02.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeMemo04.GUIID)
				return new GuiGuiPgeMemo04.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiOgrMessage.GUIID)
				return new GuiGuiOgrMessage.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiLucidWebtoon.GUIID)
				return new GuiGuiLucidWebtoon.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiHsdDriveLicense.GUIID)
				return new GuiGuiHsdDriveLicense.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiNightmareManual.GUIID)
				return new GuiGuiNightmareManual.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeDreamhall.GUIID)
				return new GuiGuiPgeDreamhall.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeMemo1.GUIID)
				return new GuiGuiPgeMemo1.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiPgeMemo03.GUIID)
				return new GuiGuiPgeMemo03.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiGroComic01.GUIID)
				return new GuiGuiGroComic01.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiGroComic02.GUIID)
				return new GuiGuiGroComic02.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiGroComic03.GUIID)
				return new GuiGuiGroComic03.GuiWindow(world, x, y, z, player);
			if (id == GuiGuiKjpXmas.GUIID)
				return new GuiGuiKjpXmas.GuiWindow(world, x, y, z, player);
			return null;
		}
	}
	public List<ModElement> getElements() {
		return elements;
	}

	public List<Supplier<Block>> getBlocks() {
		return blocks;
	}

	public List<Supplier<Item>> getItems() {
		return items;
	}

	public List<Supplier<Biome>> getBiomes() {
		return biomes;
	}

	public List<Supplier<EntityEntry>> getEntities() {
		return entities;
	}

	public List<Supplier<Potion>> getPotions() {
		return potions;
	}
	public static class ModElement implements Comparable<ModElement> {
		@Retention(RetentionPolicy.RUNTIME)
		public @interface Tag {
		}
		protected final ElementsPpapdreamMod elements;
		protected final int sortid;
		public ModElement(ElementsPpapdreamMod elements, int sortid) {
			this.elements = elements;
			this.sortid = sortid;
		}

		public void initElements() {
		}

		public void init(FMLInitializationEvent event) {
		}

		public void preInit(FMLPreInitializationEvent event) {
		}

		public void generateWorld(Random random, int posX, int posZ, World world, int dimID, IChunkGenerator cg, IChunkProvider cp) {
		}

		public void serverLoad(FMLServerStartingEvent event) {
		}

		public void registerModels(ModelRegistryEvent event) {
		}

		public int addFuel(ItemStack fuel) {
			return 0;
		}

		@Override
		public int compareTo(ModElement other) {
			return this.sortid - other.sortid;
		}
	}
}
